// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Blur

struct Agent{
    float2 position;
    float angle;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<float4> colors;
RWStructuredBuffer<Agent> agents; 
int height;
int width;
int sensorSize = 10;
uint numAgents;
float deltaTime;
float steeringSpeed = 1;
float PI = 3.14;
float moveSpeed = 0.001;
float tgtX;
float tgtY;
bool isTarget = false;

uint hash(uint state){
    state ^= 2747636419u;
    state *= 2747636419u;
    state ^= state >> 16;
    state *= 2747636419u;
    state ^= state >> 16;
    state *= 2747636419u;
    return state;
}


float sense(Agent agent,float sensorAngleOffset){
    float sensorAngle = agent.angle + sensorAngleOffset;
    float2 sensorDir = float2(cos(sensorAngle),sin(sensorAngle));
    int2 sensorCentre = agent.position + sensorDir * 10;
    float sum = 0;

    for(int offsetX = -sensorSize; offsetX <= sensorSize;offsetX++){
        for(int offsetY = -sensorSize;offsetY <= sensorSize;offsetY++){
            int2 pos = sensorCentre + int2(offsetX,offsetY);

            if(pos.x >=0 && pos.x < width && pos.y >= 0 && pos.y < height){
                sum += Result[pos].x;
            }
        }
    }
    return sum;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
//if(id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {return;}

    //if (id.x >= numAgents){return;}
    //Result[id.xy] = 1;
    
    Agent agent = agents[id.x];
    uint random = hash(agent.position.y * width + agent.position.x + hash(id.x));  
    
    /*
    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height) {
        newPos.x = min(width-0.01,max(0,newPos.x));
        newPos.y = min(height-0.01, max(0,newPos.y));
        agents[id.x].angle = random/4294967295.0 * 360 * 2 * PI;
    }*/

    float randomNormal = random/4294967295.0;

    if(!isTarget){
        float weightForward = sense(agents[id.x],0);
        float weightLeft = sense(agents[id.x], 1);
        float weightRight = sense(agents[id.x], -1);

        if(weightForward > weightLeft && weightForward > weightRight){
            agents[id.x].angle +=0;
        }else if (weightForward < weightLeft && weightForward < weightRight){
            agents[id.x].angle += (randomNormal - 0.5) * 2 * steeringSpeed * deltaTime;
        }else if(weightRight > weightLeft){
            agents[id.x].angle -= randomNormal * steeringSpeed * deltaTime;
        }else if(weightLeft > weightRight){
            agents[id.x].angle += randomNormal * steeringSpeed * deltaTime;
        }
    }else{
        float2 tgtVector = float2(tgtX - agents[id.x].position.x,tgtY - agents[id.x].position.y);
        agents[id.x].angle = tgtX-agents[id.x].position.x;
    }

    float2 direction = float2(cos(agents[id.x].angle),sin(agents[id.x].angle));
    float2 newPos = agent.position + direction * moveSpeed * deltaTime;

    if(newPos.x <0)
    {
        agents[id.x].angle = randomNormal * 0.785;
    } else
    if(newPos.y <0)
    {
        agents[id.x].angle = randomNormal* 0.785 + 1.1775;
    }else
    if(newPos.x >= width)
    {
        agents[id.x].angle = randomNormal * 0.785 + 2.7475;//-15;
    }else
    if(newPos.y >= height)
    {
        agents[id.x].angle = randomNormal* 0.785 + 4,3175;
    }
    
    agents[id.x].position = newPos;
    Result[int2(newPos.x,newPos.y)] =colors[0];
}

[numthreads(8,8,1)]
void Blur(uint3 id : SV_DispatchThreadID)
{
//if(id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {return;}

    float4 originalVal = Result[id.xy];

    float4 sum = 0;
    for (int offsetX = -1; offsetX <= 1; offsetX++){
        for (int offsetY = -1;offsetY <= 1; offsetY++){
            int sampleX = id.x + offsetX;
            int sampleY = id.y + offsetY;

            if(sampleX >=0&& sampleX < width && sampleY >=0 && sampleY < height){
                sum += Result[int2(sampleX,sampleY)];
            }

        }
    }

    float4 blurResult = sum/9;

    float4 diffusedVal = lerp(originalVal, blurResult, 0.7);
    float4 evaporatedVal = max(0,diffusedVal - 0.005);

    Result[id.xy] = evaporatedVal;
}
